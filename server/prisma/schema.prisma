// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // User model
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  email     String @unique
  username  String
  password  String
  role      Role
}

enum Role {
  manager
  admin
  client
}

// ApartmentComplex model
model ApartmentComplex {
  id         String      @id @default(uuid())
  name       String      @unique
  street     String
  city       String
  state      String
  zipcode    String
  buildings  Building[]
  apartments Apartment[] // ✅ Back-relation to Apartment
}

// Building model
model Building {
  id             String           @id @default(uuid())
  complexId      String           @unique
  complex        ApartmentComplex @relation(fields: [complexId], references: [id])
  buildingNumber Int
  apartments     Apartment[]
}

// Apartment model
model Apartment {
  id            String           @id @default(uuid())
  buildingId    String
  complexId     String
  building      Building         @relation(fields: [buildingId], references: [id])
  complex       ApartmentComplex @relation(fields: [complexId], references: [id])
  unitNumber    String
  rentAmount    Decimal
  numBedrooms   Int
  squareFootage Int
  isAvailable   Boolean          @default(true)
  leases        Lease[] // ✅ Back-relation to Lease
}

// Tenant model
model Tenant {
  id                  String               @id @default(uuid())
  firstName           String
  lastName            String
  email               String               @unique
  phoneNumber         String
  dateOfBirth         DateTime
  leases              Lease[] // ✅ Back-relation to Lease
  maintenanceRequests MaintenanceRequest[] // ✅ Back-relation
}

// Lease model
model Lease {
  id              String    @id @default(uuid())
  apartmentId     String    @unique
  apartment       Apartment @relation(fields: [apartmentId], references: [id])
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  startDate       DateTime
  endDate         DateTime
  monthlyRent     Decimal
  securityDeposit Decimal
  isActive        Boolean   @default(true)
  payments        Payment[] // ✅ Back-relation to Payment
}

// Payment model
model Payment {
  id            String        @id @default(uuid())
  leaseId       String
  lease         Lease         @relation(fields: [leaseId], references: [id])
  paymentAmount Decimal
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod
  isLatePayment Boolean       @default(false)
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
}

// MaintenanceRequest model
model MaintenanceRequest {
  id          String        @id @default(uuid())
  tenantId    String
  tenant      Tenant        @relation(fields: [tenantId], references: [id])
  description String
  requestDate DateTime      @default(now())
  status      RequestStatus @default(PENDING)
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// Employee model
model Employee {
  id           String       @id @default(uuid())
  firstName    String
  lastName     String
  email        String       @unique
  phone        String
  employeeType EmployeeType
  salary       Decimal
  hourlyRate   Decimal?
  startDate    DateTime
  street       String
  city         String
  state        String
  zipcode      String
  payrolls     Payroll[] // ✅ Back-relation to Payroll
}

enum EmployeeType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

// Payroll model
model Payroll {
  id             String    @id @default(uuid())
  employeeId     String
  employee       Employee  @relation(fields: [employeeId], references: [id])
  payPeriodStart DateTime
  payPeriodEnd   DateTime
  grossPay       Decimal
  stateTaxRate   Decimal   @default(0.05)
  federalTaxRate Decimal   @default(0.10)
  deductions     Decimal   @default(0.00)
  netPay         Decimal
  isPaid         Boolean   @default(false)
  paidOn         DateTime?
}

// Document model
model Document {
  id           String       @id @default(uuid())
  name         String
  documentType DocumentType
  uploadedFile String
  uploadedAt   DateTime     @default(now())
}

enum DocumentType {
  INVOICE
  RECEIPT
  LEASE_AGREEMENT
  OTHER
}
