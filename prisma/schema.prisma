// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  role String
  createdAt DateTime @default(now())
 

  
  // leases    Lease[]  // A user (tenant) can have many leases
  // payments  Payment[]
  // requests  MaintenanceRequest[]

  // Landlords and managers can own properties
  // properties Property[] @relation("OwnerProperties")
}


model Property {
  id         Int      @id @default(autoincrement())
  name       String
  address    String
  city       String
  state      String
  zipCode    String
  // createdAt  DateTime @default(now())
  // building
  units      Unit[]   // Each user can have multiple units
  leases Lease[]  // Each property can have multiple leases
}
// model Building{
//   id Int @id @default(autoincrement())
//   property Int
//   property Property @relation(fields: [buildingId]references: [id])
// unit Int
//   unit unit @relation(fields: [unitId]references: [id])
//   }
model Tenant{
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  phone Float
  roleName String
maintenanceRequest MaintenanceRequest[]
  lease Lease[]
  payment Payment[]
  }

model Unit {
  id          Int      @id @default(autoincrement())
  unitNumber  String
  rent        Float
  description String?
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
building Int
  propertyId  Int
  property    Property @relation(fields: [propertyId], references: [id])
maintenanceRequest MaintenanceRequest[]
  lease     Lease[]  // A unit can have multiple leases over time (active/inactive)
}

model Lease {
  id             Int      @id @default(autoincrement())
  leaseStartDate      DateTime
  leaseEndDate        DateTime
  monthlyRent    Float
  securityDeposit Float
  propertyId Int
property Property @relation(fields: [propertyId],references: [id])
  tenantId       Int
  tenant         Tenant     @relation(fields: [tenantId], references: [id])

  unitId         Int
  unit           Unit     @relation(fields: [unitId], references: [id])

  leaseStatus    LeaseStatus @default(ACTIVE)

  payments       Payment[]
}

model Payment {
  id          Int      @id @default(autoincrement())
  paymentDate DateTime @default(now())
  amount      Float
  status      PaymentStatus @default(PENDING)
  method      String // e.g., Credit Card, Bank Transfer

  tenantId    Int
  tenant      Tenant     @relation(fields: [tenantId], references: [id])

  leaseId     Int
  lease       Lease    @relation(fields: [leaseId], references: [id])
}

model MaintenanceRequest {
  id           Int      @id @default(autoincrement())
  requestDate  DateTime @default(now())
  description  String
  status       MaintenanceStatus @default(PENDING)
  completedAt  DateTime?

  tenantId     Int
  tenant       Tenant     @relation(fields: [tenantId], references: [id])

  unitId       Int
  unit         Unit     @relation(fields: [unitId], references: [id])
}

// model Invoice {
//   id          Int      @id @default(autoincrement())
//   invoiceDate DateTime @default(now())
//   dueDate     DateTime
//   amount      Float
//   status      InvoiceStatus @default(UNPAID)

//   tenantId    Int
//   tenant      Tenant     @relation(fields: [tenantId], references: [id])

//   leaseId     Int
//   lease       Lease    @relation(fields: [leaseId], references: [id])
// }
enum Role {
  TENANT
 ADMIN
}

enum LeaseStatus {
  ACTIVE
  TERMINATED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
}

