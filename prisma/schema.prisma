// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id         Int      @id @default(autoincrement())
  name       String
  address    String
  city       String
  state      String
  zipCode    String
  unit      Unit[]   // Each user can have multiple units
  lease Lease[]  // Each property can have multiple leases
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  role String
}

model Tenant{
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  phone String?
  role String
maintenanceRequest MaintenanceRequest[]
  lease Lease[]
  payment Payment[]
  }

model Unit {
  id          Int      @id @default(autoincrement())
  unitNumber  Int
  rent        Float
  description String?
  available   Boolean  @default(true)
buildingNumber Int
  propertyId  Int
  property    Property @relation(fields: [propertyId], references: [id])
maintenanceRequest MaintenanceRequest[]
  lease     Lease[]  // A unit can have multiple leases over time (active/inactive)
}

model Lease {
  id             Int      @id @default(autoincrement())
  leaseStartDate      DateTime
  leaseEndDate        DateTime
  monthlyRent    Float
  securityDeposit Float
  unitNumber Int
  propertyId Int
property Property @relation(fields: [propertyId],references: [id])
  tenantId       Int
  tenant         Tenant     @relation(fields: [tenantId], references: [id])
  unitId         Int
  unit           Unit     @relation(fields: [unitId], references: [id])
  leaseStatus    LeaseStatus @default(ACTIVE)
  payment       Payment[]
}

model Payment {
  id          Int      @id @default(autoincrement())
  paymentDate DateTime
  amount      Float
  status      PaymentStatus @default(PENDING)
  method      String // e.g., Credit Card, Bank Transfer
  tenantId    Int
  tenant      Tenant     @relation(fields: [tenantId], references: [id])
  leaseId     Int
  lease       Lease    @relation(fields: [leaseId], references: [id])
}

model MaintenanceRequest {
  id           Int      @id @default(autoincrement())
  requestDate  DateTime @default(now())
  description  String
  status       MaintenanceStatus @default(PENDING)
  completedAt  DateTime?
  tenantId     Int
  tenant       Tenant     @relation(fields: [tenantId], references: [id])
  unitId       Int
  unit         Unit    @relation(fields: [unitId], references: [id])
}

// model Invoice {
//   id          Int      @id @default(autoincrement())
//   invoiceDate DateTime @default(now())
//   dueDate     DateTime
//   amount      Float
//   status      InvoiceStatus @default(UNPAID)

//   tenantId    Int
//   tenant      Tenant     @relation(fields: [tenantId], references: [id])

//   leaseId     Int
//   lease       Lease    @relation(fields: [leaseId], references: [id])
// }
enum Role {
  TENANT
 ADMIN
}

enum LeaseStatus {
  ACTIVE
  TERMINATED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
}

