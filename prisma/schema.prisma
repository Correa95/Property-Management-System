// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // You can change to "mysql" or "sqlite"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   // e.g., 'admin', 'manager'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  properties          Property[]
  maintenanceRequests MaintenanceRequest[]
}

model Property {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  units     Unit[]   // A property can have multiple units
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  adminId   Int
  admin     Admin @relation(fields: [adminId], references: [id])
}

model Unit {
  id          Int      @id @default(autoincrement())
  unitNumber  String   @unique
  description String
  rentAmount  Float

  status      UnitStatus @default(AVAILABLE) // Unit availability status
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  propertyId  Int
  property    Property @relation(fields: [propertyId], references: [id])

  lease       Lease?
  payments    Payment[]
  maintenanceRequests MaintenanceRequest[]
}

model Lease {
  id            Int      @id @default(autoincrement())
  startDate     DateTime
  endDate       DateTime
  rentAmount    Float
  securityDeposit Float
  isActive      Boolean  @default(true)

  // Relations
  unitId        Int @unique
  unit          Unit @relation(fields: [unitId], references: [id])
  tenantId      Int  @unique
  tenant        Tenant @relation(fields: [tenantId], references: [id])

  payments      Payment[]
}

model Payment {
  id            Int      @id @default(autoincrement())
  amount        Float
  paymentDate   DateTime @default(now())
  paymentType   PaymentType
  paymentStatus PaymentStatus @default(PAID)

  // Relations
  leaseId       Int
  lease         Lease @relation(fields: [leaseId], references: [id])

  unitId        Int
  unit          Unit @relation(fields: [unitId], references: [id])

  tenantId      Int
  tenant        Tenant @relation(fields: [tenantId], references: [id])
}

model Tenant {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  phone         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  lease         Lease?
  payments      Payment[]
  maintenanceRequests MaintenanceRequest[]
}

model MaintenanceRequest {
  id            Int      @id @default(autoincrement())
  description   String
  status        MaintenanceStatus @default(PENDING)
  requestDate   DateTime @default(now())
  resolutionDate DateTime?

  // Relations
  unitId        Int
  unit          Unit @relation(fields: [unitId], references: [id])

  tenantId      Int?
  tenant        Tenant? @relation(fields: [tenantId], references: [id])

  adminId       Int
  admin         Admin @relation(fields: [adminId], references: [id])
}

enum PaymentType {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  CHECK
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum UnitStatus {
  AVAILABLE
  LEASED
  UNDER_MAINTENANCE
}

